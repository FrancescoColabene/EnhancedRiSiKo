#version 450#extension GL_ARB_separate_shader_objects : enable#define PI 3.1415926538layout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 DlightDir;		// direction of the direct light	vec3 DlightColor;	// color of the direct light	vec3 AmbLightColor;	// ambient light	vec3 eyePos;		// position of the viewer} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 color;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(location = 0) out vec4 outColor;vec3 BRDF(vec3 V, vec3 N, vec3 L, vec3 Md, float F0, float metallic, float roughness) {	//vec3 V  - direction of the viewer	//vec3 N  - normal vector to the surface	//vec3 L  - light vector (from the light model)	//vec3 Md - main color of the surface	//float F0 - Base color for the Fresnel term	//float metallic - parameter that mixes the diffuse with the specular term.	//                 in particular, parmeter K seen in the slides is: 	//float K = 1.0f - metallic;	float K = metallic;	//float roughness - Material roughness (parmeter rho in the slides).	//specular color Ms is not passed, and implicitely considered white: 	vec3 Ms = vec3(1.0f);		//float rough = pow(roughness,2);	//rough = pow(rough,2);	float rough = roughness;	vec3 h = normalize(L + V);	float D = rough / (PI * pow( pow(clamp(dot(N,h),0.0,1.0),2) * (rough - 1) + 1 ,2));		float F = F0 + (1 - F0) * pow(1 - clamp(dot(V,h),0.0,1.0),5);	//F = 1;	float G1 = 2 / (1 + sqrt(1 + (rough * (1-pow(dot(N,V),2)) / pow(dot(N,V),2) )));	float G2 = 2 / (1 + sqrt(1 + (rough * (1-pow(dot(N,L),2)) / pow(dot(N,L),2) )));	float G = G1 * G2; 		// test	//G = min(min(1, (2 * dot(h,N)*dot(V,N)) / dot(V,h)), (2 * dot(h,N)*dot(L,N)) / dot(V,h));	//D = pow(dot(h,N), (2/rough)-2) / (3.14 * rough); 	//D = exp(-(1 - pow(dot(h,N),2))/ pow(dot(h,N),2) * rough) / (3.14 * rough * pow(dot(h,N),4));		vec3 specular = Ms * ((D * F * G) / (4 * clamp(dot(V,N),0.0,1.0)));		// both are fine	vec3 diffuse = Md * clamp(dot(L,N),0.0,1.0);	//vec3 diffuse = Md * max(dot(L,N),0.0);			vec3 res = K * diffuse + (1 - K) * specular;	return res;}void main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.DlightDir);			// light direction	vec3 albedo = ubo.color.rgb;			// main color	vec3 MD = albedo;	vec3 MS = ubo.sColor;	vec3 MA = albedo * ubo.amb;	vec3 LA = gubo.AmbLightColor;		// Write the shader here		float roughness = 0.1f;	float fresnel = 0.3f;	float metallic = 0.2f;		vec3 lightColor = gubo.DlightColor.rgb;	vec3 DiffSpec = BRDF(V, N, L, albedo, 0.3f, metallic, roughness);		vec3 Ambient = albedo * 0.05f;		outColor = vec4(clamp(0.95 * DiffSpec * lightColor.rgb + Ambient,0.0,1.0), 1.0f);}