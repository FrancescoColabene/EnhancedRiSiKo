#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {	vec3 DlightDir;		// direction of the direct light	vec3 DlightColor;	// color of the direct light	vec3 AmbLightColor;	// ambient light	vec3 eyePos;		// position of the viewer} gubo;layout(set = 1, binding = 0) uniform UniformBufferObject {	float amb;	float gamma;	vec3 color;	vec3 sColor;	mat4 mvpMat;	mat4 mMat;	mat4 nMat;} ubo;layout(location = 0) out vec4 outColor;// rim implementationvec3 rimDot(float VdotN, float NdotL){	float rimThreshold = 0.1f;	float rimAmount = 0.8f;	vec3 rimColor = vec3(1.0f, 0.05f, 0.05f);	//vec3 rimColor = vec3(1.0f); white for testing	float dotRim = clamp(1 - VdotN, 0.0f, 1.0f);	float rimIntensity = dotRim * pow(NdotL, rimThreshold);	rimIntensity = smoothstep(rimAmount - 0.02, rimAmount + 0.02, rimIntensity);		return rimColor * rimIntensity;}void main() {	vec3 N = normalize(fragNorm);				// surface normal	vec3 V = normalize(gubo.eyePos - fragPos);	// viewer direction	vec3 L = normalize(gubo.DlightDir);			// light direction	vec3 MD = ubo.color.rgb;					// main color	vec3 MS = ubo.sColor;	vec3 MA = MD * ubo.amb;	vec3 LA = gubo.AmbLightColor;		// Write the shader here		float prod = dot(L,N);	float intensity = 0.1f;	if(prod > -0.6f) {		intensity = 0.25f;	}	if(prod > -0.2f) {		intensity = 0.5f;	}	if(prod > 0.2f) {		intensity = 0.75f;	}	if(prod > 0.6f) {		intensity = 1.0f;	}		//intensity = smoothstep(0.0, 0.01, prod);		vec3 specular = MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma);		vec3 rim = rimDot(dot(V,N), dot(N,L));		if(specular.r > 0.85 && specular.g > 0.85 && specular.b > 0.85 ) {		specular = vec3(0.8f);	}	else {		specular = vec3(0.0f);	}		outColor = vec4(clamp(((MD * intensity) + specular + rim) * gubo.DlightColor + LA * MA, 0.0f, 1.0f), 1.0f);	//outColor = vec4(clamp((MD * clamp(dot(L,N),0.0f,1.0f) + MS * pow(clamp(dot(N, normalize(L + V)), 0.0f, 1.0f), ubo.gamma)) * gubo.DlightColor +LA * MA,0.0f, 1.0f), 1.0f);	// output color}